@using Blazor3D.Models
@inject IJSRuntime JS
@implements IAsyncDisposable

<canvas id="webgpu-canvas"
		class="webgpu-canvas"
        style="height:100%; width:100%;"
        @ref="_canvasRef">
</canvas>
@*    
		style="height:@($"{Height}px"); width:100%;"
        width="@Width"
        height="@Height"
    how to change the height
Or, put it in a container with a fixed height and keep the canvas at height: 100% inside that container, but the change above to tiny-webgpu-demo.js is the key fix.
*@
@code {
/// <summary>
/// WebGPU rendering options. Pass a configured instance to control grid appearance and camera.
/// </summary>
[Parameter]
public WebGpuGridOptions Options { get; set; } = WebGpuGridOptions.Default;

    private ElementReference _canvasRef;
    private IJSObjectReference? _module;
    private DotNetObjectReference<WebGPUCanvas>? _dotNetRef;
    private bool _ready;
    private string? _error;
    public double LatestFrameMs { get; private set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // One-time initialization: import module and create .NET reference
        _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/webgpu-canvas.js");
        _dotNetRef = DotNetObjectReference.Create(this);

        // Send initial options (this triggers the render loop in JS)
        await SendOptionsToJavaScriptAsync(isInitializing: true);
    }

    protected override async Task OnParametersSetAsync()
    {
        // Only send updates after the module is loaded (after first render)
        await SendOptionsToJavaScriptAsync(isInitializing: false);
    }

    private async Task SendOptionsToJavaScriptAsync(bool isInitializing)
    {
        // Guard: module must be loaded (happens after first render)
        if (_module is null) return;

        if (isInitializing)
        {
            await _module.InvokeVoidAsync("initGridDemo", _dotNetRef, _canvasRef, Options);
        }
        else
        {
            await _module.InvokeVoidAsync("updateGridOptions", Options);
        }
    }

    [JSInvokable]
    public Task OnWebGpuReady()
    {
        _ready = true;
        _error = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnWebGpuError(string message)
    {
        _ready = false;
        _error = message;
        StateHasChanged();
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnFrameMsUpdate(double ms)
    {
        LatestFrameMs = ms;
        // No StateHasChanged to avoid re-render per frame; consumer can bind to events if desired
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            try { await _module.InvokeVoidAsync("disposeGridDemo"); } catch { /* ignore */ }
            try { await _module.DisposeAsync(); } catch { /* ignore */ }
        }

        _dotNetRef?.Dispose();
    }
}
