@inject IJSRuntime JS

<canvas id="webgpu-canvas"
        class="webgpu-canvas"
        width="@Width"
        height="@Height">
</canvas>
@*    
    how to change the height
    style="height:@($"{Height}px"); width:100%;"
Or, put it in a container with a fixed height and keep the canvas at height: 100% inside that container, but the change above to tiny-webgpu-demo.js is the key fix.
*@
@code {
    [Parameter]
    public int Width { get; set; } = 800;

    [Parameter]
    public int Height { get; set; } = 600;

    // Grid options translated to C#
    [Parameter]
    public string ClearColor { get; set; } = "#003366"; // hex

    [Parameter]
    public string LineColor { get; set; } = "#ffffff"; // hex

    [Parameter]
    public string BaseColor { get; set; } = "#000000"; // hex

    [Parameter]
    public float LineWidthX { get; set; } = 0.05f;

    [Parameter]
    public float LineWidthY { get; set; } = 0.05f;

    private IJSObjectReference? _module;
    private bool _initialized;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/webgpu-canvas.js");

        var options = new
        {
            clearColor = HexToRgba(ClearColor),
            lineColor = HexToRgba(LineColor),
            baseColor = HexToRgba(BaseColor),
            lineWidthX = LineWidthX,
            lineWidthY = LineWidthY
        };

        await _module.InvokeVoidAsync("initGridDemo", options);
        _initialized = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!_initialized || _module is null) return;

        await _module.InvokeVoidAsync("updateGridOptions", new
        {
            clearColor = HexToRgba(ClearColor),
            lineColor = HexToRgba(LineColor),
            baseColor = HexToRgba(BaseColor),
            lineWidthX = LineWidthX,
            lineWidthY = LineWidthY
        });
    }

    private static object HexToRgba(string hex)
    {
        if (string.IsNullOrWhiteSpace(hex))
            return new { r = 1.0f, g = 1.0f, b = 1.0f, a = 1.0f };

        if (hex.StartsWith('#')) hex = hex[1..];

        if (hex.Length == 6)
        {
            var r = Convert.ToInt32(hex.Substring(0, 2), 16) / 255f;
            var g = Convert.ToInt32(hex.Substring(2, 2), 16) / 255f;
            var b = Convert.ToInt32(hex.Substring(4, 2), 16) / 255f;
            return new { r, g, b, a = 1.0f };
        }

        if (hex.Length == 8)
        {
            var r = Convert.ToInt32(hex.Substring(0, 2), 16) / 255f;
            var g = Convert.ToInt32(hex.Substring(2, 2), 16) / 255f;
            var b = Convert.ToInt32(hex.Substring(4, 2), 16) / 255f;
            var a = Convert.ToInt32(hex.Substring(6, 2), 16) / 255f;
            return new { r, g, b, a };
        }

        return new { r = 1.0f, g = 1.0f, b = 1.0f, a = 1.0f };
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            try { await _module.DisposeAsync(); } catch { /* ignore */ }
        }
    }
}
